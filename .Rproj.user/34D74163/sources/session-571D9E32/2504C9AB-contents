---
title: "Project 2"
author: "Rachel Hencher"
date: "2022-09-26"
output: 
  html_document:
    toc: true
    toc_float: true
    theme: cerulean
    highlight: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

The goal for this project is to create a vignette about contacting an API using functions created to query, parse, and return well-structured data. Then, to use the functions to obtain data from the API and do some exploratory data analysis.  

# Required packages  

`tidyverse`: a collection of R packages that are designed to work together to allow us to read in, transform, and visualize data  
`httr`: allows us to use the `GET` function to access the API   
`jsonlite`: allows us to access the `fromJSON` function to convert JSON data to a data frame  
`ggplot2`: a package in the tidyverse that we will use for creating graphics
```{r, message=FALSE, warning= FALSE}
library(tidyverse)
library(httr)
library(jsonlite)
library(ggplot2)
library(gridExtra)
```

# Functions  
Each of the functions below will contact the chosen API and return well-formatted, parsed data in the form of data frames.  

## `general_info`  
The following function returns general information on either the largest or smallest *n* colleges in a particular state. The user should provide input four arguments:  
- `key` requests the user's personal key to access the API  
- `state` requests which state the user would like to retrieve info for using the 2-character abbreviation for the state  
- `size` requests whether the user would like data on large or small schools by selecting "desc" or "asc" respectively  
- `n` is the number of records returned (1-100)

```{r}
general_info <- function(key="D3KHf387z9W0EaDoVZNsvD6aOSHPWZmwDvKpTxpr", state="NC", size="desc", n=50)
{
  url <- paste0("http://api.data.gov/ed/collegescorecard/v1/schools?api_key=", key, "&school.state=", state, "&per_page=", n, "&sort=student.size:", size)

  data <- GET(url)

  parsed_data <- fromJSON(rawToChar(data$content))

# Create a tibble with the desired variables
  school <- parsed_data$results$latest$school %>%
    select("Name"=name, "Ownership"=ownership)

      school$Ownership <- as.factor(school$Ownership)
        levels(school$Ownership) <- c("Public", "Private, Nonprofit", "Proprietary")

  student <- parsed_data$results$latest$student %>%
    select("Size"=size)

  admissions <- parsed_data$results$latest$admissions$admission_rate %>%
    select("Admissions_Rate"=overall)

  cost <- parsed_data$results$latest$cost$tuition %>%
    select(ends_with("state"))

  college_data <- 
    cbind(school, student, admissions, cost) %>%
    as_tibble() %>%
    rename("In_State_Tuition"=in_state, "Out_State_Tuition"=out_of_state)

return(college_data)
}

general_info()
```

## `cost_info`  
The following function returns cost info on either the most or least expensive *n* colleges in a particular state by in-state tuition. The user should provide input four arguments:  
- `key` requests the user's personal key to access the API  
- `state` requests which state the user would like to retrieve info for using the 2-character abbreviation for the state  
- `cost` requests whether the user would like data on expensive or more affordable schools by selecting "desc" or "asc" respectively  
- `n` is the number of records returned (1-100)
```{r}
cost_info <- function(key="D3KHf387z9W0EaDoVZNsvD6aOSHPWZmwDvKpTxpr", state="NC", cost="desc", n=50)
{
  url <- paste0("http://api.data.gov/ed/collegescorecard/v1/schools?api_key=D3KHf387z9W0EaDoVZNsvD6aOSHPWZmwDvKpTxpr&school.state=", state, "&per_page=", n, "&sort=cost.tuition.in_state:", cost)

  data <- GET(url)

  parsed_data <- fromJSON(rawToChar(data$content))

# Create a tibble with the desired variables
  school <- parsed_data$results$latest$school %>%
    select("Name"=name, "Ownership"=ownership)

      school$Ownership <- as.factor(school$Ownership)
        levels(school$Ownership) <- c("Public", "Private, Nonprofit", "Proprietary")

  cost <- parsed_data$results$latest$cost$tuition %>%
    select(ends_with("state"))

  cost2 <- parsed_data$results$latest$cost %>%
    select("Books_Supplies"=booksupply)

  cost3 <- parsed_data$results$latest$cost$roomboard %>%
    select("On_Campus_Room_Board"=oncampus)

  college_data <- 
    cbind(school, cost, cost2, cost3) %>%
    as_tibble() %>%
    mutate(sumrow=in_state+Books_Supplies+On_Campus_Room_Board) %>%
    rename("In_State_Tuition"=in_state, "Out_State_Tuition"=out_of_state, "Total_In_State_Costs"=sumrow)

return(datatable(college_data))
}

cost_info(c)
```

## `admissions_info`  
The following function returns admissions info on *n* colleges under a particular "ownership" category. The user should provide input four arguments:  
- `key` requests the user's personal key to access the API  
- `ownership` requests whether the user would like to retrieve admissions info for "1" (public), "2" (private, nonprofit), or "3" (proprietary) colleges  
- `rate` requests whether the user would like data on less competitive or more selective schools by selecting "desc" or "asc" respectively  
- `n` is the number of records returned (1-100)
```{r}
admissions_info <- function(key="D3KHf387z9W0EaDoVZNsvD6aOSHPWZmwDvKpTxpr", ownership=1, rate="asc", n=50)
{
  url <- paste0("http://api.data.gov/ed/collegescorecard/v1/schools?api_key=", key, "&per_page=", n, "&school.degrees_awarded.predominant=3&school.ownership=", ownership, "&sort=admissions.admission_rate.overall:", rate)

  data <- GET(url)

  parsed_data <- fromJSON(rawToChar(data$content))

  school <- parsed_data$results$latest$school %>%
    select("Name"=name, "Ownership"=ownership)
    
      school$Ownership <- as.factor(school$Ownership)
        levels(school$Ownership) <- c("Public", "Private, Nonprofit", "Proprietary")

  admissions <- parsed_data$results$latest$admissions$admission_rate %>%
    select("Admissions_Rate"=overall)
  
  admissions2 <- parsed_data$results$latest$admissions %>%
    select("Test_Requirements"=test_requirements)

      admissions2$Test_Requirements <- as.factor(admissions2$Test_Requirements)
        levels(admissions2$Test_Requirements) <- c("Required", "Recommended", "Neither required nor recommended", "Do not know", "Considered but not required")
  
  admissions3 <- parsed_data$results$latest$admissions$sat_scores$midpoint %>%
    select("SAT_Reading"=critical_reading, "SAT_Writing"=writing, "SAT_Math"=math)
  
  admissions4 <- parsed_data$results$latest$admissions$act_scores$midpoint %>%
    select("ACT_English"=english, "ACT_Writing"=writing, "ACT_Math"=math)
  
  college_data <- 
    cbind(school, admissions, admissions2, admissions3, admissions4) %>%
    as_tibble()
  
return(datatable(college_data))
}

admissions_info()
```

## `demographic_info()`  
The following function returns demographic  information of the school based on the location info on *n* colleges. The user should provide input four arguments:  
- `key` requests the user's personal key to access the API  
- `locale` requests the user to mention if they would like to see data on the location of the school.(city/suburb/town/rural)
- `rate` requests whether the user would like data on the number of students in the school by selecting "desc" or "asc" respectively  
- `n` is the number of records returned (1-100)

```{r}
demographic_info <- function(key="k42psBgICW3DEe6eS1gc7AxbTTYtOwOGN9URGVuT", state = "NC", locale="town", n=50, size = "asc")
{
  location <- ifelse(locale=="city", "11, 12, 13", 
                     ifelse(locale=="suburb", "21, 22, 23",
                            ifelse(locale=="town", "31, 32, 33",
                                   ifelse(locale=="rural", "41, 42, 43", "ERROR"))))
  url <- paste0("http://api.data.gov/ed/collegescorecard/v1/schools?api_key=", key, "&per_page=", n, "&school.state=", state, "&school.locale=", location, "&sort=student.size:", size)

  data <- GET(url)

  parsed_data <- fromJSON(rawToChar(data$content))
  
  school <- parsed_data$results$latest$school %>% 
    select(c("name", "state", "city", "ownership")) 
  
  total_enrollment <- parsed_data$results$latest$student$size
  
  school$ownership <- as.factor(school$ownership)
        levels(school$ownership) <- c("Public", "Private, Nonprofit", "Proprietary")
  
  race_ethnicity <- parsed_data$results$latest$student$demographics$race_ethnicity %>% 
    select("aian", "nhpi", "asian", "black", "white", "hispanic", "unknown")
  
  men <- parsed_data$results$latest$student$demographics$men
  
  women <- parsed_data$results$latest$student$demographics$women
  
  demographic_data <- 
    cbind(school, total_enrollment, race_ethnicity, men, women) %>%
    as_tibble()
  
  demographic_data <- demographic_data %>% 
    mutate(total_aian = round(total_enrollment*aian), 
           total_nhpi = round(total_enrollment*nhpi), 
           total_asian = round(total_enrollment*asian), 
           total_black = round(total_enrollment*black),
           total_white = round(total_enrollment*white), 
           total_hispanic = round(total_enrollment*hispanic),
           total_unknown = round(total_enrollment*unknown),
           total_men = round(total_enrollment*men),
           total_women = round(total_enrollment*women)) %>% 
    select(name, city, ownership, starts_with("total_")) %>% 
    pivot_longer(cols = !c(name, city, ownership), names_to = "ethnicity_gender", values_to = "count") 
  
return(demographic_data)
}
demographic_info()
```


## Demographic Report 

```{r}
demographic_data <- demographic_info()
colnames(demographic_data)
```

The demographic data takes the input of the location and state of the school the user wants to see the demographic data for alongwith other preliminary information. The function then communicates with the database using the API and extracts the following information: 
- name : name of the school 
- city : city of the school 
- ownership : ownership of the school 
- total_enrollment : enrollment of undergraduate certificate/degree-seeking students
- total_aian : The total number of undergraduate American Indian/Alaska Native students 
- total_nhpi : The total number of undergraduate Native Hawaiian/Pacific Islander students
- total_asian : The total number of undergraduate Asian students
- total_black : The total number of undergraduate Black students
- total_white : The total number of undergraduate White students
- total_hispanic : The total number of undergraduate Hispanic students
- total_unknown : The total number of undergraduate Unknown Racial Ethnicity students
- total_men : The total number of undergraduate men students
- total_women : The total number of undergraduate women students

```{r}
ggplot(demographic_data) +
  aes(x = ownership, y = count) +
  geom_col(fill = "#112446") +
  labs(
    x = "Ownership ",
    y = "Total Enrollment",
    title = "Undergraduate Students enrolled for each Ownership",
    subtitle = paste("State :", state, "; Locale :", locale)
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) 
```

```{r}
demographic_data
```


```{r}
demographic_data_ownership <- demographic_data %>% 
  filter(!(ethnicity_gender %in% c("total_men", "total_women"))) %>% 
  group_by(ownership, ethnicity_gender) %>% 
  summarise(total_count = sum(count))
demographic_data_ownership
```

```{r}
demographic_data_ownership %>% 
 filter(!(ethnicity_gender %in% "total_enrollment")) %>%
 ggplot() +
  aes(x = ownership, y = total_count, fill = ethnicity_gender) +
  geom_col(position = "dodge") +
  scale_fill_hue(direction = 1) +
  labs(
    x = "Ownership",
    y = "Total Student Count",
    title = "Undergraduate Students enrolled for each Ownership by Ethnicity",
    subtitle = paste("State :", state, "; Locale :", locale)
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) 
```

```{r}
demographic_data_gender <- demographic_data %>% 
  filter(ethnicity_gender %in% c("total_men", "total_women")) %>% 
  pivot_wider(names_from = ethnicity_gender, values_from = count)
```


```{r, warning=FALSE}
men_plot <- ggplot(demographic_data_gender) +
  aes(x = total_men, y = ownership) +
  geom_boxplot(fill = "#112446") +
  geom_jitter() +
  #scale_x_continuous(trans = "log10") +
  labs(
    x = "Total Men",
    y = "Ownership",
    title = "Men Students for each Ownership",
    subtitle = paste("State :", state, "; Locale :", locale)
  ) +
  coord_flip() +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) 

women_plot <- ggplot(demographic_data_gender) +
  aes(x = total_women, y = ownership) +
  geom_boxplot(fill = "#112446") +
  geom_jitter() +
  #scale_x_continuous(trans = "log10") +
  labs(
    x = "Total Men",
    y = "Ownership",
    title = "Women Students for each Ownership",
    subtitle = paste("State :", state, "; Locale :", locale)
  ) +
  coord_flip() +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) 

grid.arrange(men_plot, women_plot, ncol=2)

```


## `financial_info()`  
The following function returns income information info on *n* colleges based on the ownership of the college. The user should provide input four arguments:  
- `key` requests the user's personal key to access the API  
- `state` requests which state the user would like to retrieve info for using the 2-character abbreviation for the state  
- `size` requests whether the user would like data on the number of students in the school by selecting "desc" or "asc" respectively  
- `n` is the number of records returned (1-100)

```{r}
financial_info <- function(key="k42psBgICW3DEe6eS1gc7AxbTTYtOwOGN9URGVuT", state="NC", n=50, size = "desc")
{
                                   
  url <- paste0("http://api.data.gov/ed/collegescorecard/v1/schools?api_key=", key, "&per_page=", n, "&school.state=", state, "&sort=student.size:", size)

  data <- GET(url)

  parsed_data <- fromJSON(rawToChar(data$content))
  
  school <- parsed_data$results$latest$school %>% 
    select(c("ownership", "city", "name")) 
  
  school$ownership <- as.factor(school$ownership)
        levels(school$ownership) <- c("Public", "Private, Nonprofit", "Proprietary")
  
  size <- parsed_data$results$latest$student$size
  
  poverty_rate <- parsed_data$results$latest$student$demographics$poverty_rate
  
  financial_bg_data <- 
    cbind(school, size, poverty_rate) %>%
    as_tibble() 

return(financial_bg_data)
}
financial_info()
```



```{r}
financial_data <- financial_info() %>% 
  group_by(ownership, city) %>% 
  summarise(median_poverty_rate = median(poverty_rate))
financial_data

financial_data %>%
 filter(!is.na(median_poverty_rate)) %>%
 ggplot() +
  aes(x = median_poverty_rate, y= ..density..) +
  geom_histogram(bins = 14L, fill = "#112446") +
  geom_density(color = "red", 
                 size = 2) +
  labs(
    x = "Poverty Rate",
    title = "Poverty Rate Distribution by State"
  ) +
  theme_minimal()
```



```{r}
poverty_ownership <- financial_info() %>% 
  group_by(ownership) %>% 
  summarise(median_pr = mean(poverty_rate))

ggplot(poverty_ownership) +
  aes(x = ownership, y = median_pr) +
  geom_col(fill = "#112446") +
  labs(
    x = "Poverty Rate",
    title = "Poverty Rate by Ownership for Each State"
  ) +
  theme_minimal()

```

## `earnings_info()`  
The following function returns earnings information on *n* colleges with either the highest or lowest median student earnings 10 years after entry. The user should provide input for three arguments:  
- `key` requests the user's personal key to access the API  
- `earnings` requests whether the user would like data on schools whose students are the highest earners or lowest earners by selecting "desc" or "asc" respectively  
- `n` is the number of records returned (1-100)
```{r}
earnings_info <- function(key="D3KHf387z9W0EaDoVZNsvD6aOSHPWZmwDvKpTxpr", earnings="desc", n=50)
{
  url <- paste0("http://api.data.gov/ed/collegescorecard/v1/schools?api_key=D3KHf387z9W0EaDoVZNsvD6aOSHPWZmwDvKpTxpr&per_page=", n, "&sort=earnings.10_yrs_after_entry.median:", earnings)

  data <- GET(url)

  parsed_data <- fromJSON(rawToChar(data$content))

# Create a tibble with the desired variables
  school <- parsed_data$results$latest$school %>%
    select("Name"=name)

  cost <- parsed_data$results$latest$cost$tuition %>%
    select(ends_with("state"))
  
  earnings1 <- parsed_data$results$latest$earnings$`10_yrs_after_entry` %>%
    select("Median_Earnings"=median)
  
  earnings2 <- parsed_data$results$latest$earnings$`10_yrs_after_entry`$mean_earnings %>%
    select("Mean_For_Females"=female_students, "Mean_For_Males"=male_students)

  college_data <- 
    cbind(school, cost, earnings1, earnings2) %>%
    as_tibble() %>%
    mutate("Earnings_To_Cost_Ratio"=round(Median_Earnings/in_state,2)) %>%
    rename("In_State_Tuition"=in_state, "Out_State_Tuition"=out_of_state)

return(college_data)
}

earnings_info()
```

```{r}
earnings_data <- earnings_info()

instate_earning <- ggplot(earnings_data) +
  aes(x = In_State_Tuition, y = Median_Earnings) +
  geom_point(shape = "circle", size = 2, colour = "#112446") +
  geom_smooth(span = 0.75) +
  theme_minimal()

outstate_earning <-  ggplot(earnings_data) +
  aes(x = Out_State_Tuition, y = Median_Earnings) +
  geom_point(shape = "circle", size = 2, colour = "#112446") +
  geom_smooth(span = 0.75) +
  theme_minimal()



grid.arrange(instate_earning, outstate_earning, ncol=2)
```



